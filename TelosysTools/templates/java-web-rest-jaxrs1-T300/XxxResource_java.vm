##
#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
## --- Primary Key arguments by getters, e.g. "review.getCustomerCode(), review.getBookId()"
## #set( $pkElementsGetters = $fn.argumentsListWithGetter($uncapitalizedEntityName, $entity.keyAttributes) )
## --- Primary Key arguments, e.g. "customerCode, bookId"
#set( $pkElementsVariables = $fn.argumentsList($entity.keyAttributes) )
##
#set( $entityClass = "${entity.name}Record" )
#set( $entityListItemClass = "${entity.name}ListItem" )
##
## --- Pk arguments
#set( $pkArgs = "" )
#foreach( $attribute in $entity.keyAttributes )
#if( $foreach.count > 1 )
#set( $pkArgs = "${pkArgs}, " )
#end
#set( $pkArgs = "${pkArgs}${attribute.name}" )
#end
##
## --- Primary Key request path, e.g. "{customerCode}/{bookId}"
#set( $pkPath = "" )
#foreach( $attribute in $entity.keyAttributes )
#if( $foreach.count > 1 )
#set( $pkPath = "${pkPath}/" )
#end
#set( $pkPath = "${pkPath}{${attribute.name}}" )
#end
##
## --- Primary Key Path Variables, e.g. "@PathParam("customerCode") String customerCode, @PathParam("bookId") Integer bookId"
#set( $pkPathVariables = "" )
#foreach( $attribute in $entity.keyAttributes )
#if( $foreach.count > 1 )
#set( $pkPathVariables = "${pkPathVariables}, " )
#end
#set( $pkPathVariables = "${pkPathVariables}@PathParam(${QUOT}${attribute.name}${QUOT}) $attribute.type $attribute.name" )
#end
##
## --- Primary Key with '+' , e.g. "customerCode+bookId"
#set( $pkPlus = "" )
#foreach( $attribute in $entity.keyAttributes )
#if( $foreach.count > 1 )
#set( $pkPlus = "${pkPlus}+" )
#end
#set( $pkPlus = "${pkPlus}${attribute.name}" )
#end
##
## --- Referenced entities (e.g. "Book", "Country", "Author", ... )
## #set( $referencedEntities = $tools.referencedEntityTypes($entity, $entity.attributes) )## All referenced entities (PK and NON PK)
## #set( $referencedNonPKEntities = $tools.referencedEntityTypes($entity, $entity.nonKeyAttributes) )## Entities referenced by NON PK fields
#set( $referencedEntities = $entity.referencedEntityTypes() )## All referenced entities (PK and NON PK)
## #set( $referencedNonPKEntities = $entity.referencedEntityTypes($entity.nonKeyAttributes) )## Entities referenced by NON PK fields
## -----------------------------------------------------------------------------------------------------------------------------
/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder($SRC)};

## #if ( $referencedEntities.size() > 0 )
## import java.util.LinkedList;
## #end
import java.util.LinkedList;
import java.util.List;

//--- Entities
import ${ROOT_PKG}.data.record.${entityClass};
import ${ROOT_PKG}.data.record.listitem.${entityListItemClass};
#*
#foreach( $ref in $referencedEntities )
#if ( $ref != ${entity.name} )## to avoid multiple imports for the same entity
import ${ENTITY_PKG}.$ref;
#end
#end
*#

//--- Services 
import ${ROOT_PKG}.persistence.${entity.name}Persistence;
// import ${ROOT_PKG}.business.service.impl.${entity.name}ServiceImpl;
import ${ROOT_PKG}.persistence.commons.PersistenceServiceProvider;
import ${ROOT_PKG}.web.rest.commons.AbstractResourceController;

#*
#foreach( $ref in $referencedEntities )
#if ( $ref != ${entity.name} )## to avoid multiple imports for the same service
import ${ROOT_PKG}.business.service.${ref}Service;
#end
#end
*#

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

/**
 * JAXRS Jersey controller for '${entity.name}' management.
 */
@Path("/${uncapitalizedEntityName}s")
public class ${entity.name}Resource extends AbstractResourceController {

	private ${entity.name}Persistence ${uncapitalizedEntityName}Service = PersistenceServiceProvider.getService(${entity.name}Persistence.class);

	/**
	 * Constructor
	 */
	public ${entity.name}Resource() {
		super();
		logger.info("Constructor.");
	}

	/**
	 * Get all ${uncapitalizedEntityName}.
	 * @return all ${uncapitalizedEntityName}
	 */
	@GET
	@Produces({MediaType.APPLICATION_JSON})
	public List<${entityClass}> findAll() {
		logger.info("findAll()...");
		return ${uncapitalizedEntityName}Service.findAll();
	}

	/**
	 * Get ${uncapitalizedEntityName}.
#foreach( $attribute in $entity.keyAttributes )
	 * @param ${attribute.name} ${attribute.name}
#end
	 * @return ${uncapitalizedEntityName}
	 */
	@GET
	@Path("${pkPath}")
	@Produces({MediaType.APPLICATION_JSON})
	public ${entityClass} findById(${pkPathVariables}) {
		logger.info("findById("+${pkPlus}+")...");
		return ${uncapitalizedEntityName}Service.findById(${pkElementsVariables});
	}

	/**
	 * Create a ${uncapitalizedEntityName}.
	 * @param ${uncapitalizedEntityName} ${uncapitalizedEntityName}
	 * @return ${uncapitalizedEntityName}
	 */	
	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	public ${entityClass} create(${entityClass} ${uncapitalizedEntityName}) {
		logger.info("create()...");
		return ${uncapitalizedEntityName}Service.create(${uncapitalizedEntityName});
	}

	/**
	 * Update a ${uncapitalizedEntityName}.
	 * @param ${uncapitalizedEntityName} ${uncapitalizedEntityName}
#foreach( $attribute in $entity.keyAttributes )
	 * @param ${attribute.name} ${attribute.name}
#end
	 * @return ${uncapitalizedEntityName}
	 */	
	@PUT
	@Path("${pkPath}")
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	// public ${entityClass} update(${entityClass} ${uncapitalizedEntityName}, ${pkPathVariables}) {
	public boolean update(${entityClass} ${uncapitalizedEntityName}, ${pkPathVariables}) {
		logger.info("update()...");
		return ${uncapitalizedEntityName}Service.update(${uncapitalizedEntityName});
	}

	/**
	 * Delete a ${uncapitalizedEntityName}.
#foreach( $attribute in $entity.keyAttributes )
	 * @param ${attribute.name} ${attribute.name}
#end
	 */
	@DELETE
	@Path("${pkPath}")
	@Consumes({MediaType.APPLICATION_JSON})
	public void delete(${pkPathVariables}) {
		logger.info("delete("+${pkPlus}+")...");
		${uncapitalizedEntityName}Service.deleteById(${pkArgs});
	}

	@GET
	@Path("/${uncapitalizedEntityName}s-list-items")
	@Produces({MediaType.APPLICATION_JSON})
	public List<${entityListItemClass}> listItems() {
		logger.info("listItems()...");
		List<${entityClass}> list = ${uncapitalizedEntityName}Service.findAll();
		List<${entityListItemClass}> items = new LinkedList<${entityListItemClass}>();
		for ( ${entityClass} ${uncapitalizedEntityName} : list ) {
			items.add(new ${entityListItemClass}( ${uncapitalizedEntityName} ) );
		}
		return items;
	}

}
