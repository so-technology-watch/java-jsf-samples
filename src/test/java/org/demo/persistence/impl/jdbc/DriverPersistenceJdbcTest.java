/*
 * Created on 2017-01-30 ( Date ISO 2017-01-30 - Time 11:40:59 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package org.demo.persistence.impl.jdbc;

import java.sql.SQLException;

import org.demo.data.record.DriverRecord ;
import org.demo.persistence.impl.jdbc.commons.DAOTestUtil;

import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;


/**
 * JUnit tests for DriverDAO
 * 
 * @author Telosys Tools
 *
 */
public class DriverPersistenceJdbcTest {


	private static final String CREATE_TABLE = 
			 "CREATE TABLE Driver ("
			+ "id INTEGER NOT NULL,"
			+ "nom VARCHAR(45) NOT NULL,"
			+ "PRIMARY KEY(id)"
			+ ");"
			;

	@BeforeClass
	public static void init() {
		DAOTestUtil.initDatabase(CREATE_TABLE, "Driver") ;
	}

	@Test
	public void testDAO() throws SQLException {
    	System.out.println("test DriverDAO ");
    	DriverPersistenceJdbc dao = new DriverPersistenceJdbc();


    	Assert.assertTrue( dao.count() == 0 );

    	DriverRecord driver = new DriverRecord();
		//--- Key values
		driver.setId(100); // "id" : int
		//--- Other values
		driver.setNom("A"); // "nom" : java.lang.String

    	//--- INSERT
    	System.out.println("Insert : " + driver );
    	dao.insert(driver);
    	Assert.assertTrue( dao.exists(100) );
    	Assert.assertTrue( dao.count() == 1 );
    	Assert.assertTrue( dao.exists(driver) );
    	
    	//--- FIND
    	System.out.println("Find..." );
    	DriverRecord driver2 = dao.findById(100);
    	Assert.assertNotNull(driver2);
		Assert.assertTrue( driver2.getId() == 100 ) ;
    	Assert.assertTrue( dao.exists(driver2) ) ;
    	
    	//--- UPDATE
		//--- Change values
		driver2.setNom("B"); // "nom" : java.lang.String
    	System.out.println("Update : " + driver2 );
    	Assert.assertTrue( dao.update(driver2) );
    	
    	//--- LOAD
    	DriverRecord driver3 = new DriverRecord();
    	driver3.setId(100);
    	Assert.assertTrue( dao.load(driver3) );
    	System.out.println("Loaded : " + driver3 );
		Assert.assertEquals(driver2.getNom(), driver3.getNom() ); 


    	driver3.setId(300);
    	Assert.assertFalse( dao.load(driver3) );
    	
    	//--- DELETE
    	System.out.println("Delete : " + driver2 );
    	Assert.assertTrue( dao.delete(driver2) ); // Delete #1 : OK
    	Assert.assertFalse( dao.delete(driver2) ); // Nothing (already deleted)
    	Assert.assertFalse( dao.deleteById(100) ); // Nothing (already deleted)

    	Assert.assertTrue( dao.count() == 0 );
    	Assert.assertFalse( dao.exists(100) ) ;
    	Assert.assertFalse( dao.exists(driver2) ) ;
    	driver2 = dao.findById(100);
    	Assert.assertNull( driver2 );
    	
    	System.out.println("Normal end of DAO test." );
	}

}
