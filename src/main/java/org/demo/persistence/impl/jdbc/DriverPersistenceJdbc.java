/*
 * Created on 2017-01-30 ( Date ISO 2017-01-30 - Time 11:40:59 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package org.demo.persistence.impl.jdbc;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.inject.Named;


import org.demo.data.record.DriverRecord ;
import org.demo.persistence.DriverPersistence;
import org.demo.persistence.impl.jdbc.commons.GenericDAO;

/**
 * Driver persistence implementation 
 * 
 * @author Telosys
 *
 */
@Named("DriverPersistence")
public class DriverPersistenceJdbc extends GenericDAO<DriverRecord> implements DriverPersistence {

	private final static String SQL_SELECT_ALL = 
		"select id, nom from Driver"; 

	private final static String SQL_SELECT = 
		"select id, nom from Driver where id = ?";

	private final static String SQL_INSERT = 
		"insert into Driver ( id, nom ) values ( ?, ? )";

	private final static String SQL_UPDATE = 
		"update Driver set nom = ? where id = ?";

	private final static String SQL_DELETE = 
		"delete from Driver where id = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from Driver";

	private final static String SQL_COUNT = 
		"select count(*) from Driver where id = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public DriverPersistenceJdbc() {
		super();
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForPrimaryKey(PreparedStatement ps, int i, DriverRecord driver) throws SQLException {
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, driver.getId() ) ; // "id" : int
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForInsert(PreparedStatement ps, int i, DriverRecord driver) throws SQLException {
		//--- Set PRIMARY KEY and DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, driver.getId() ) ; // "id" : int
		setValue(ps, i++, driver.getNom() ) ; // "nom" : java.lang.String
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForUpdate(PreparedStatement ps, int i, DriverRecord driver) throws SQLException {
		//--- Set DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, driver.getNom() ) ; // "nom" : java.lang.String
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, driver.getId() ) ; // "id" : int
	}

	//----------------------------------------------------------------------
	/**
	 * Creates a new instance of the bean and populates it with the given primary value(s)
	 * @param id;
	 * @return the new instance
	 */
	private DriverRecord newInstanceWithPrimaryKey( Integer id ) {
		DriverRecord driver = new DriverRecord();
		driver.setId( id );
		return driver ;
	}

	//----------------------------------------------------------------------
	@Override
	protected DriverRecord newInstance() {
		return new DriverRecord() ;
	}

    //----------------------------------------------------------------------
	@Override
	protected DriverRecord populateBean(ResultSet rs, DriverRecord driver) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		driver.setId(rs.getInt("id")); // int
		driver.setNom(rs.getString("nom")); // java.lang.String
		return driver ;
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public DriverRecord findById( Integer id ) {
		DriverRecord driver = newInstanceWithPrimaryKey( id ) ;
		if ( super.doSelect(driver) ) {
			return driver ;
		}
		else {
			return null ; // Not found
		}
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public List<DriverRecord> findAll() {
		return super.doSelectAll();
	}

	//----------------------------------------------------------------------
	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s) in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from the database<br>
	 * If not found, the given instance remains unchanged
	 * @param driver
	 * @return true if found, false if not found
	 */
	//@Override
	public boolean load( DriverRecord driver ) {
		return super.doSelect(driver) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Inserts the given bean in the database 
	 * @param driver
	 */
	public long insert(DriverRecord driver) {
		super.doInsert(driver);
		return 0L ;
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public DriverRecord create(DriverRecord driver) {
		insert(driver);
		return driver ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public boolean update(DriverRecord driver) {
		int r = super.doUpdate(driver);
		return r > 0 ;

	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public DriverRecord save(DriverRecord driver) {
		if ( super.doExists(driver) ) {
			super.doUpdate(driver);
		}
		else {
			super.doInsert(driver);
		}
		return driver ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public boolean deleteById( Integer id ) {
		DriverRecord driver = newInstanceWithPrimaryKey( id ) ;
		int r = super.doDelete(driver);
		return r > 0 ;
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	@Override
	public boolean delete( DriverRecord driver ) {
		int r = super.doDelete(driver);
		return r > 0 ;
	}

    //----------------------------------------------------------------------
	/**
	 * Checks the existence of a record in the database using the given primary key value(s)
	 * @param id;
	 * @return
	 */
	// @Override
	public boolean exists( Integer id ) {
		DriverRecord driver = newInstanceWithPrimaryKey( id ) ;
		return super.doExists(driver);
	}
    //----------------------------------------------------------------------
	/**
	 * Checks the existence of the given bean in the database 
	 * @param driver
	 * @return
	 */
	// @Override
	public boolean exists( DriverRecord driver ) {
		return super.doExists(driver);
	}

    //----------------------------------------------------------------------
	/**
	 * Counts all the records present in the database
	 * @return
	 */
	// @Override
	public long count() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelectAll() {
		return SQL_SELECT_ALL;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}

}
